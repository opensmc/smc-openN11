The open211 json data for the San Mateo County LAFCo organization

The format is json (java script notaion)
json is used by modern web based APIs (application programming interfaces).  It is very readable.  Ask if you don't understand something.

This entry is my "base level data" information.  The kind of information that if you were going someplace and it was missing in the app, you would goole for it.

In particular if an app queries:
  us:ca:co:smcgov:*
The app will  git this limited data about LAFCo.

On the otherhand if they query:
  us:ca:co:smcgov:lafco:*
The app will get a much richer set of LAFCo data.
  All the cities, boards and commissions.
  Information about LAFCo itself.
This is descussed in a separate document

us:ca:co:smcgov:lafco {

what are uids and fquids?
The org_uid is the unique id of the data item (org) of the entry.  It is assigned by the current parent organization.

So for the fully qualified UID:
  org_fquid: us:ca:co:smcgov:lafco:cities:rwc
Open Data portal:	us:ca:co:smcgov
Parent org:		lafco
Child items:		cities, cities:rwc

The parent org getis its UID from its parent or lafco's grandparent.  The lafco UID only has to be unique in: us:ca:co:smcgov
The child items are unique in the parent's name space.  In this case the parent "lafco" defined "cities" which in tern defined "rwc".  Note: All of these are unique and allowed: cities:cities, rwc:rwc, rwc:cities.  All are unique in the us:ca:co:smcgov:lafco name space.


The importance of the UID:
the UID is what ulamately defines the universal fully qualified UID.  Because this name is unique in the parent's name space and the parent's name is uniqie in the larger global namespece combining the parent's fquid with the child's UID creates the childs fquid:
  us:ca:co:smcgov:lafco + cities = us:ca:co:smcgov:lafco:cities

The UID only has to be unique in the parent's namespece, lafco.
  The text "cities" only needs to be unique in the first level namespace, lafco:blah
  The text "rwc" only needs to be unique in the specific second level namespace, lafco:cities:blah
  The text "cities:rwc" and "rwc:cities" are completely differnt:
    "cities:rwc" defines the specific item name "rwc" in the namespace lafco:cities
    "rwc:cities" defines the specific item name "cities" in the namespace lafco:rwc

The best UIDs are internal record IDs defined by the organization that uses the data.  Quite often this is a short 8 character, or less, ID string that is included the address/phone/other information of every form that is printed out.  Normally it is automatically generated by the application.  It might be something like bldg-32, dept-242, park-21.  It might also be an acronym like: rwc, csm, smc, ccsm.

What is the important about this organization unique ID?
If the data export to the Open Data portal can include this internal record ID, then the Open Data can be referenced back to the original data.  If data changes in the "offcial" data source, the County's internal systems, then a CRUD (Create, R??, Update, Distroy) update can be generated.  The updates can be automatically downloaded to the Socrata Open Data portal.  This whole process can be automated.


The importance of the Fully Qualfied UID:
To talk about the importantce of the fquid, we need to talk about the "symantic web".

The Domain Naming System, dns and the HTTP protocol allowed the modern internet to be built.  There are powerful search engines like google and bing that help is find information.  We get a page of results back and we use our human brains to figure out which entries are most relavant, or even related.  Machines (computers) can not parse the data and undersant the relationship between the data items.

The symantic web solves this problem by defining the relationship between the different types (source) of data.  I have a father relationship to my daughters. I also have siblings and parent relationships.  On a different track I have a owner relationship with my address, phone number, email and social media accounts.  I write blogs so I have an author relationship with my postings.  Random people may have a reader or a commentor relationship with me through my postings.

Because the data about me has a symantic relationship with me and by extension each other they are machine learnable, machine discoverable.

The symantic web and the fquid:
One way to impose symantic order on a dataset is through a heiarchial tree/branch/leaf model.
  The tree defines where the data is stored: the Open Data portal
  The branch defines which organization or in the case of Socrata, which table is used
  The leafs are the items of data stored in that branch or table

The fquid is a left to right heiarcial structure.  Naming is very free form.  Names only have to be unique in a parent for the children directly blow them.  Names in child domains do not have to be unque.  My names can be the same as the names in a parent domain or a peer domain.  Because each of our names have a different path to the name, they are all different and unique.

Another important feature of a fquid is that it allows a parent to delegate control to a child namespace.  The child is free to do what they want.  We use carrot and stick.  Carrot: if you structire your namespace similar to how we structure ours then there are apps that work.  Stick: if you do things your own way, only your apps will work with your data and probably not with other orgainiztions data.

fquid and DNS:
If all this sounds a lot like DNS, it should.  The design is based on the scaling architecture of DNS.



