Feature Request: Support json NoSQL document store datasets

Do you have plans to support NoSQL data stores?

My understanding is that you use postgres SQL as your primary (authoratative) data store.  Postgress supports a json based NoSQL document store.  You would need a different API layer.  Something like mongoDB or CouchDB which scale horizontally.

json NoSQL:
In a NoSQL document store each item of data has its own page of json data.  The format or data stored in a page of json data is defined by a json schema.  Diffent pages can have very different schemas and store completely diffiernt types of data.

In a json data store individual pieces of data or items are defined by data properties.  Properties are the differnty symantic types of data that can be stored in a dataset: columns, types, fields.  Not the data itself, but the name you use to retrieve the data.

While a schema may have hudreds of properties, a json data page only stores the data properties that have data (text or numbers) assigned to them.  All undefined properties return a null value.  

A json data store looks at data differently.  Rather than a CSV x/y, column/row view of the data, a json data store looks to see if the item (row) exists and then searches the item to see if the property (column) is defined.  If it is, the data is found, otherwise a null result is returned.  This allows differnt items to have differnt properties (columns).

A nice introduction to a NoSQL document store is:
  https://en.wikipedia.org/wiki/Document-oriented_database


So where is Harker coming from?

I am developing a global open211 data structure that will support entries for the many different types of government services:
  Human services: health, food assistance, homeless and mental health services.
    ohana, smc-connect
  Public services like schools, fire stations, libraries and parks.
  Government services: boards, departments, programs, services,
    assessor's parcels, county records and PDF documents.


You can see that if you are trying to support this diverse set of services the number of different types of data, properties (columns), you need to store grows exponentially.

I am making my minimal default open211 dataset:
  http://
My work is mainly on the first column, the "org_fquid" (or f-quid) which uniquely identifies a specific json data page.

My org_FQUID (f-quid) looks a lot like a domain name in reverse with colons rahter than dots.  This is because that is roughly what it is.

My open211 CSV dataset currently has over 25 columns for the default "base level data".  And I have just started adding data types.  I predict that the base level data will be at least a hundred columns.  Each individual entry will only use a fraction of the availble fields.  But in a cvs based table you have to populate every field.

Then in addition, each type of service will have its own set of data types.  Consider the difference between the data for a homeless shelter, a job training program and a mental health service.  Do we make a super CVS that has 1,000 or 10,000 columns?

Or do we make a separate Socrata dataset for each type of service? 

Our civic goventment offers thousands of different types of service.  That could be thousands of datasets.  Do we want an Open Data portal with thousands of disconnected tables?

json NoSQL document store solution:

A json data set allows for a common indexing system that stores differnt types of data depending on what services that index location (item) provides.  This data is stored as a page.  The json data page contains data defined in the base schema.  Additional service (type) schemas are used to define service specific data types (proprerties).

This allows several diffent types of service store information about a location.  A building shared by several differnt serives.  Someone querying one service could see information about other services at the same location.

From a DBA point of view the significan difference is indexing.  (Other than the NoSQL thing.)  Because data is stored in separate pages of data for each item, a non-indexed search is very slow.  In memory indexes are now inexpensive so rich sets of indexes are possible.  Hundreds of indexs even.




This will not scale.   Or does Socrata not have any problems with a table with 1,000 to 10,000 columns and 10,000 to 100,000 rows does not give you a moment's pause. as a guy on the ops side of DevOps, I know it gives me reason to pause.

This is the problem a CSV or table based database faces.

A NoSQL data store solution gets around this problem by only storing the data types (columns) that the indivdual instance or item has data for.  Only have 10 columns of datat?  Store the data as a 10 or so item (properties?) json file.  The file would have an additional 10-30 metadata properties.  But not 1,000 to 10,000 properties.


A service directory for the generic service of "parks":
  smcgov:parks:
    location
    facilties
    trails
    staff
    programs
    information

A government department directory for "parks":
  smcgov:gov:parks:
    org_chart
    staff
    budget
    projects
    about_us

org: sub-directories:

org {
  contact: official contact info for the org.
  schema: json data schemas
  org_uid children: valid names in this orgainization namespace
    # any name can be a valid name (org_uid) if the parent knows about it.

  # recommended child organizations
  gov {
    # departments, programs, facilities, staff, ... }
  np {
    # non-profit organizations }
  com {
    # comercial for profit businesses

  # recommended service names
health
socsvcs: social services
pubworks: public works or infrastrcute
schools
fire stations
civic: citizen engagement:
  elected officals


open211: directory of public services: human, health, schools, parks, government.
open311: individual service query or requests: street sweeping? report a new pot hole.
open411: white pages of government public names, locations, phones and homepages.

openN11 request:
We are not talking about speaking to an operator.
We are talking about an app making a network query of the Open Data resource.


